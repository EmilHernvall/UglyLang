compound_type LinkedList #Link (value:string, next:LinkedList),
                         #Terminator;

(void)(LinkedList, string) appendList =
    (void)(LinkedList list, string v) {
        unpack list as #Link current {
            LinkedList after = current.next;

            unpack after as #Terminator {
                current.next =
                    (
                        value: v,
                        next: #Terminator
                    );
            }

            unpack after as #Link link {
                appendList(link, v);
            }
        }
    };

(LinkedList)(LinkedList, string) prependList =
    (LinkedList)(LinkedList list, string v) {
        unpack list as #Link link {
            return (
                    value: v,
                    next: link
                );
        }
    };

LinkedList myList =
    (
        value: "foo",
        next: (
            value: "bar",
            next: #Terminator
        )
    );

appendList(myList, "baz");
appendList(myList, "quux");
appendList(myList, "what");

LinkedList current = myList;
int loop = 1;
while loop == 1 {
    unpack current as #Link n {
        print(n.value);
        current = n.next;
    }

    unpack current as #Terminator {
        loop = 0;
    }
}
