type TreeKey string;
type TreeValue string;

compound_type TreeLookup #Valid TreeValue,
                         #NotFound;

compound_type TreeNode #Node (key:TreeKey,
                              value:TreeValue,
                              left:TreeNode,
                              right:TreeNode),
                       #Terminator;

type Tree (root: TreeNode,
           add: (void)(TreeKey, TreeValue),
           get: (TreeLookup)(TreeKey),
           size: (int)());
type TreeConstructor (Tree)();

(TreeNode)(TreeKey, TreeValue) createTreeNode =
(TreeNode)(TreeKey key, TreeValue value) {
    return (
            key: key,
            value: value,
            left: #Terminator,
            right: #Terminator
        );
};

TreeConstructor createTree =
(Tree)() {
    return (
        root: #Terminator,

        add: (void)(TreeKey key, TreeValue value) {

            (TreeNode)(TreeNode,string,string) hiddenAdd =
            (TreeNode)(TreeNode node, TreeKey key, TreeValue value) {
                unpack node as #Terminator {
                    return createTreeNode(key, value);
                }

                unpack node as #Node n {
                    if (key >= n.key) {
                        n.right = hiddenAdd(n.right, key, value);
                    }
                    if (key < n.key) {
                        n.left = hiddenAdd(n.left, key, value);
                    }
                    return n;
                }
            };

            root = hiddenAdd(root, key, value);
        },

        get: (TreeLookup)(TreeKey key) {

            (TreeLookup)(TreeNode,string) hiddenGet =
            (TreeLookup)(TreeNode node, TreeKey key) {
                unpack node as #Node n {
                    if (key > n.key) {
                        return hiddenGet(n.right, key);
                    }
                    if (key < n.key) {
                        return hiddenGet(n.left, key);
                    }
                    return n.value;
                }

                unpack node as #Terminator {
                    return #NotFound;
                }
            };

            return hiddenGet(root, key);
        },

        size: (int)() {

            (int)(TreeNode) hiddenSize =
            (int)(TreeNode node) {
                unpack node as #Terminator {
                    return 0;
                }

                unpack node as #Node n {
                    int a = hiddenSize(n.left);
                    int b = hiddenSize(n.right);
                    return 1 + a + b;
                }
            };

            return hiddenSize(root);
        }
    );
};

Tree testTree = createTree();
testTree.add("charlotta", "bengtsgård");
testTree.add("emil", "hernvall");
testTree.add("daniel", "andersson");
testTree.add("miki", "momen");
testTree.add("hannes", "hernvall");
testTree.add("erik", "ödmark");
testTree.add("torbjörn", "hernvall");

dump(testTree.root);

print("size: " + intToStr(testTree.size()));
TreeLookup result = testTree.get("charlotta");
unpack result as #Valid v {
    print(v);
}

TreeLookup result2 = testTree.get("felicia");
unpack result2 as #Valid v {
    print(v);
}
unpack result2 as #NotFound {
    print("Not Found");
}
