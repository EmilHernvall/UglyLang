options {
    STATIC = false ;
    UNICODE_INPUT = true ;
}

PARSER_BEGIN(Parser)
package se.c0la.uglylang;

import java.util.*;

import se.c0la.uglylang.ast.*;
import se.c0la.uglylang.type.*;

public class Parser
{
    private Map<String, Type> types = null;
    private Map<String, CompoundType> subTypeLookup = null;
}
PARSER_END(Parser)

SKIP :
{
  "/*" : WithinComment
}
<WithinComment> SKIP :
{
  "*/" : DEFAULT
}
<WithinComment> MORE :
{
  <~[]>
}

TOKEN : { < #ident : ("-")? <nmstart> (<nmchar>)* > }
TOKEN : { < #typename : "#" <nmstart> (<nmchar>)* > }
TOKEN : { < #name : (<nmchar>)+ > }
TOKEN : { < #nmstart : ["a"-"z","A"-"Z"] | "_" | <nonascii> | <escape> > }
TOKEN : { < #nonascii : ["\u0080"-"\uD7FF","\uE000"-"\uFFFD"] > }
TOKEN : { < #unicode : "\\" (["a"-"f","A"-"F","0"-"9"]){1,6} (<wc>)? > }
TOKEN : { < #escape : <unicode> | "\\" ["\u0020"-"\u007E","\u0080"-"\uD7FF","\uE000"-"\uFFFD"] > }
TOKEN : { < #nmchar : ["a"-"z","A"-"Z","0"-"9"] | "_" | <nonascii> | <escape> > }
TOKEN : { < #num : (["0"-"9"])+ | (["0"-"9"])* "." (["0"-"9"])+ > }
TOKEN : { < #string : "\"" (<stringchar> | "'")* "\"" | "'" (<urlchar> | "\"")* "'" > }
TOKEN : { < #stringchar : <urlchar> | "\u0020" | "\\" <nl> > }
TOKEN : { < #urlchar : ["\u0009","\u0021","\u0023"-"\u0026","\u0028"-"\u007E"] | <nonascii> | <escape> > }
TOKEN : { < #nl : "\n" | "\r" "\n" | "\r" | "\u000C" > }
TOKEN : { < #wc: "\u0009" | "\n" | "\u000C" | "\r" | "\u0020" > }
TOKEN : { < #w : (<wc>)* > }

TOKEN : { < UNPACK : "unpack" > }
TOKEN : { < AS : "as" > }
TOKEN : { < TYPEDECL : "type" > }
TOKEN : { < TYPENAME : <typename> > }
TOKEN : { < COMPOUNDTYPEDECL : "compound_type" > }
TOKEN : { < SUBSCRIPT : "." > }
TOKEN : { < AND : "and" > }
TOKEN : { < OR : "or" > }
TOKEN : { < NOT : "not" > }
TOKEN : { < XOR : "xor" > }
TOKEN : { < IFSTMT : "if" > }
TOKEN : { < WHILESTMT : "while" > }
TOKEN : { < RETURNSTMT : "return" > }
TOKEN : { < EQ : "==" > }
TOKEN : { < NOTEQ : "!=" > }
TOKEN : { < GT : ">" > }
TOKEN : { < GTEQ : ">=" > }
TOKEN : { < LT : "<" > }
TOKEN : { < LTEQ : "<=" > }
TOKEN : { < ASSIGN : "=" > }
TOKEN : { < ADD : "+" > }
TOKEN : { < SUB : "-" > }
TOKEN : { < MUL : "*" > }
TOKEN : { < DIV : "/" > }
TOKEN : { < MOD : "%" > }
TOKEN : { < EXP : "^" > }
TOKEN : { < LPAR : "(" > }
TOKEN : { < RPAR : ")" > }
TOKEN : { < LCLAUSE : "{" > }
TOKEN : { < RCLAUSE : "}" > }
TOKEN : { < LBRACKET : "[" > }
TOKEN : { < RBRACKET : "]" > }
TOKEN : { < STMTBREAK : ";" > }
TOKEN : { < LISTSEP : "," > }
TOKEN : { < IDENT : <ident> > }
TOKEN : { < STRING : <string> > }
TOKEN : { < NUMBER : <num> > }
TOKEN : { < S : (<wc>)+ > }

/*
 * rule for whitespace:
 * a rule consumes all the trailing whitespace, but no
 * whitespace ahead.
 */

List<Node> parse() :
{
    Token t ;
    Node n ;
    List<Node> nodes ;
}
{
    {
        nodes = new ArrayList<Node>();

        types = new HashMap<String, Type>();
        types.put("int", new IntegerType());
        types.put("string", new StringType());
        types.put("bool", new BooleanType());
        types.put("void", new VoidType());

        subTypeLookup = new HashMap<String, CompoundType>();
    }
    (<S>)*
    (
        n = Statement()
        { nodes.add(n); }
    )*

    { return nodes; }
}

Type FunctionType() :
{
    Type type, type2 ;
    List<Type> params ;
}
{
    { params = new ArrayList<Type>(); }
    <LPAR>
    type = Type()
    <RPAR>
    <LPAR>
    [
        type2 = Type()
        { params.add(type2); }
        (
            ","
            (<S>)*
            type2 = Type()
            { params.add(type2); }
        )*
    ]
    <RPAR>
    { type = new FunctionType(type, params); }

    { return type; }
}

Type ObjectType() :
{
    Token t ;
    Type type, type2 ;
    Map<String, Type> params ;
}
{
    { params = new LinkedHashMap<String, Type>(); }
    <LPAR>
    [
        t = <IDENT>
        ":"
        (<S>)*
        type2 = Type()
        { params.put(t.image, type2); }
        (
            ","
            (<S>)*
            t = <IDENT>
            ":"
            (<S>)*
            type2 = Type()
            { params.put(t.image, type2); }
        )*
    ]
    <RPAR>
    { type = new ObjectType(params); }

    { return type; }
}

Type Type() :
{
    Token t ;
    Type type, type2 ;
    List<Type> params ;
}
{
    (
        LOOKAHEAD ( FunctionType() )
        type = FunctionType()
        |
        LOOKAHEAD ( ObjectType() )
        type = ObjectType()
        |
        (
            t = <IDENT>
            {
                type = types.get(t.image);
                if (type == null) {
                    throw new ParseException("Type " + t.image + " not found.");
                }
            }
        )
    )
    (
        <LBRACKET>
        <RBRACKET>
        { type = new ArrayType(type); }
    )*
    (<S>)*

    { return type; }
}

Node TypeDeclaration() :
{
    Token t ;
    Type type ;
    Node n, n2 ;
}
{
    <TYPEDECL>
    (<S>)*
    t = <IDENT>
    (<S>)*
    type = Type()
    <STMTBREAK>
    (<S>)*
    { types.put(t.image, type); }
    { n = new TypeDeclNode(type, t.image); }
    { return n; }
}

Node CompoundTypeDeclaration() :
{
    String name ;
    Token t ;
    Type type = null ;
    CompoundType compoundType ;
    Node n, n2 ;
    Map<String, Type> subTypes ;
}
{
    {
    subTypes = new HashMap<String, Type>();
    }

    <COMPOUNDTYPEDECL>
    (<S>)*
    t = <IDENT>
    {
    name = t.image;
    compoundType = new CompoundType(name, subTypes);
    types.put(name, compoundType);
    }
    (<S>)*

    t = <TYPENAME>
    (<S>)*
    [ type = Type() ]
    {
    if (type == null) {
        type = new CompoundTerminalType(t.image);
    }
    subTypes.put(t.image, type);
    subTypeLookup.put(t.image, compoundType);
    type = null;
    }

    (
        <LISTSEP>
        (<S>)*
        t = <TYPENAME>
        (<S>)*
        [ type = Type() ]
        {
        if (type == null) {
            type = new CompoundTerminalType(t.image);
        }
        if (subTypeLookup.containsKey(t.image)) {
            throw new ParseException(t.image + " has already been declared.");
        }
        subTypeLookup.put(t.image, compoundType);
        subTypes.put(t.image, type);
        type = null;
        }
    )*

    <STMTBREAK>
    (<S>)*
    {
    n = new TypeDeclNode(compoundType, name);
    return n;
    }
}

Node Statement() :
{
    Token t ;
    Node n, n2 ;
    Expression expr, expr2 ;
    Variable var ;
    Declaration d ;
}
{
    (
        LOOKAHEAD( <TYPEDECL> )
            n = TypeDeclaration()
        |
        LOOKAHEAD( <COMPOUNDTYPEDECL> )
            n = CompoundTypeDeclaration()
        |
        LOOKAHEAD( <IFSTMT> )
            n = IfStatement()
        |
        LOOKAHEAD( <UNPACK> )
            n = UnpackStatement()
        |
        LOOKAHEAD( <WHILESTMT> )
            n = WhileStatement()
        |
        LOOKAHEAD( <RETURNSTMT> )
            <RETURNSTMT>
            (<S>)+
            expr = Expression()
            <STMTBREAK>
            (<S>)*
            { n = new ReturnStatement(expr); }
        |
        LOOKAHEAD( Declaration() <ASSIGN> )
            d = Declaration()
            <ASSIGN>
            (<S>)*
            expr = Expression()
            { n = new AssignDeclarationNode(d, expr); }
            <STMTBREAK>
            (<S>)*
        |
            n = Expression()
            <STMTBREAK>
            (<S>)*
    )

    { return n; }
}

Node UnpackStatement() :
{
    Token t ;
    Variable src ;
    String dst = null ;
    Node n ;
    String subType ;
    List<Node> stmts;
}
{
    { stmts = new ArrayList<Node>(); }
    <UNPACK>
    (<S>)*

    t = <IDENT>
    (<S>)*
    { src = new Variable(t.image, 0); }

    <AS>
    (<S>)*

    t = <TYPENAME>
    (<S>)*
    { subType = t.image; }

    [
        t = <IDENT>
        (<S>)*
        { dst = t.image; }
    ]

    <LCLAUSE>
    (<S>)*
    (
        n = Statement()
        { stmts.add(n); }
    )*
    <RCLAUSE>
    (<S>)*

     {
         CompoundType type = subTypeLookup.get(subType);
         if (type == null) {
            throw new ParseException(subType + " not found.");
         }
         return new UnpackStatement(src, dst, type, subType, stmts);
     }
}

Node IfStatement() :
{
    Token t ;
    Node n, n2 ;
    List<Node> stmts;
}
{
    { stmts = new ArrayList<Node>(); }
    <IFSTMT>
    (<S>)*
    n = Expression()
    <LCLAUSE>
    (<S>)*
    (
        n2 = Statement()
        { stmts.add(n2); }
    )*
    <RCLAUSE>
    (<S>)*

     { return new IfStatement(n, stmts); }
}

Node WhileStatement() :
{
    Token t ;
    Node n, n2 ;
    List<Node> stmts;
}
{
    { stmts = new ArrayList<Node>(); }
    <WHILESTMT>
    (<S>)*
    n = Expression()
    <LCLAUSE>
    (<S>)*
    (
        n2 = Statement()
        { stmts.add(n2); }
    )*
    <RCLAUSE>
    (<S>)*

     { return new WhileStatement(n, stmts); }
}

Declaration Declaration() :
{
    Token t ;
    Type type ;
    String name ;
    Node value ;
    Declaration d ;
}
{
    type = Type()
    t = <IDENT>
    { name = t.image; }
    { d = new Declaration(type, name); }
    (<S>)*

    { return d; }
}

ObjectNode Object() :
{
    Map<String, Expression> nodes ;
    Token t ;
    Expression n ;
}
{
    { nodes = new LinkedHashMap<String, Expression>(); }
    <LPAR>
    (<S>)*
    t = <IDENT>
    ":"
    (<S>)*
    n = Expression()
    { nodes.put(t.image, n); }
    (
        ","
        (<S>)*
        t = <IDENT>
        ":"
        (<S>)*
        n = Expression()
        { nodes.put(t.image, n); }
    )*
    <RPAR>
    (<S>)*

    { return new ObjectNode(nodes); }
}

ArrayNode Array() :
{
    List<Expression> nodes ;
    Expression n ;
}
{
    { nodes = new ArrayList<Expression>(); }
    <LBRACKET>
    (<S>)*
    n = Expression()
    { nodes.add(n); }
    (
        ","
        (<S>)*
        n = Expression()
        { nodes.add(n); }
    )*
    <RBRACKET>
    (<S>)*

    { return new ArrayNode(nodes); }
}

FunctionDecl Function() :
{
    Token t ;
    Type type ;
    Node n ;
    Declaration d ;
    FunctionDecl f ;
    List<Declaration> params ;
    List<Node> statements ;
}
{
    { params = new ArrayList<Declaration>(); }
    { statements = new ArrayList<Node>(); }
    <LPAR>
    type = Type()
    <RPAR>
    <LPAR>
    [
        d = Declaration()
        { params.add(d); }
        (
            ","
            (<S>)*
            d = Declaration()
            { params.add(d); }
        )*
    ]
    <RPAR>
    (<S>)*
    <LCLAUSE>
        (<S>)*
        (
            n = Statement()
            { statements.add(n); }
        )*
    <RCLAUSE>
    (<S>)*

    { return new FunctionDecl(type, params, statements); }
}

Expression Expression() :
{
    Token t ;
    Expression n, n2 ;
}
{
    n = Expression2()
    (
            <ASSIGN>
            (<S>)*
            n2 = Expression2()
            { n = new AssignNode(n, n2); }
    )*

    { return n; }
}

Expression Expression2() :
{
    Token t ;
    Expression n, n2 ;
}
{
    n = Expression3()
    (
            <AND>
            (<S>)*
            n2 = Expression3()
            { n = new AndNode(n, n2); }
        |
            <OR>
            (<S>)*
            n2 = Expression3()
            { n = new OrNode(n, n2); }
        |
            <XOR>
            (<S>)*
            n2 = Expression3()
            { n = new XorNode(n, n2); }
    )*

    { return n; }
}

Expression Expression3() :
{
    Token t ;
    Expression n, n2 ;
}
{
    n = Expression4()
    (
            <EQ>
            (<S>)*
            n2 = Expression4()
            { n = new EqualNode(n, n2); }
        |
            <NOTEQ>
            (<S>)*
            n2 = Expression4()
            { n = new NotEqualNode(n, n2); }
        |
            <LT>
            (<S>)*
            n2 = Expression4()
            { n = new LtNode(n, n2); }
        |
            <GT>
            (<S>)*
            n2 = Expression4()
            { n = new GtNode(n, n2); }
        |
            <LTEQ>
            (<S>)*
            n2 = Expression4()
            { n = new LtEqNode(n, n2); }
        |
            <GTEQ>
            (<S>)*
            n2 = Expression4()
            { n = new GtEqNode(n, n2); }
    )*

    { return n; }
}

Expression Expression4() :
{
    Token t ;
    Expression n, n2 ;
}
{
    (
        n = Expression5()
        (
                <ADD>
                (<S>)*
                n2 = Expression5()
                { n = new AddNode(n, n2); }
            |
                <SUB>
                (<S>)*
                n2 = Expression5()
                { n = new SubNode(n, n2); }
        )*
    )

    { return n; }
}

Expression Expression5() :
{
    Token t ;
    Expression n, n2 ;
}
{
    (
        n = Expression6()
        (
                <MUL>
                (<S>)*
                n2 = Expression6()
                { n = new MulNode(n, n2); }
            |
                <DIV>
                (<S>)*
                n2 = Expression6()
                { n = new DivNode(n, n2); }
            |
                <MOD>
                (<S>)*
                n2 = Expression6()
                { n = new ModNode(n, n2); }
        )*
    )

    { return n; }
}

Expression Expression6() :
{
    Token t, t2 ;
    Expression n, n2 ;
    List<Expression> params ;
    int seq = 0 ;
}
{
    (
        LOOKAHEAD( Function() )
            n = Function()
        |
        LOOKAHEAD( Object() )
            n = Object()
        |
        LOOKAHEAD( Array() )
            n = Array()
        |
            <LPAR>
            (<S>)*
            n = Expression()
            <RPAR>
            (<S>)*
        |
            t = <IDENT>
            (<S>)*
            { n = new Variable(t.image, seq++); }
        |
            t = <NUMBER>
            (<S>)*
            { n = new IntegerConstant(t.image); }
        |
            t = <TYPENAME>
            (<S>)*
            {
            CompoundType type = subTypeLookup.get(t.image);
            if (type == null) {
                throw new ParseException(t.image + " not found.");
            }
            n = new TypeValue(type, t.image);
            }
        |
            t = <STRING>
            (<S>)*
            { n = new StringConstant(t.image.substring(1, t.image.length()-1)); }
    )

    (
        (
            <SUBSCRIPT>
            t = <IDENT>
            (<S>)*
            { n = new SubscriptNode(n, t.image, seq++); }
        )
        |
        (
            <LBRACKET>
            n2 = Expression()
            <RBRACKET>
            (<S>)*
            { n = new IndexNode(n, n2, seq++); }
        )
        |
        (
            <LPAR>
            (<S>)*
            { params = new ArrayList<Expression>(); }

            [
                n2 = Expression()
                { params.add(n2); }
                (
                    <LISTSEP>
                    (<S>)*
                    n2 = Expression()
                    { params.add(n2); }
                )*
            ]
            <RPAR>
            (<S>)*
            { n = new FunctionCall(n, params); }
        )
    )*

    { return n; }
}
