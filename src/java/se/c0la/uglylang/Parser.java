/* Generated By:JavaCC: Do not edit this line. Parser.java */
package se.c0la.uglylang;

import java.util.*;

import se.c0la.uglylang.ast.*;
import se.c0la.uglylang.type.*;

public class Parser implements ParserConstants {
    public enum Pass {
        FIRST,
        SECOND;
    };

    private Map<String, Type> types = null;
    private Map<String, CompoundType> subTypeLookup = null;
    private List<String> imports;
    private Map<String, Module> deps;

    private Pass pass = Pass.FIRST;

    public void setPass(Pass pass)
    {
        this.pass = pass;
    }

    public Map<String, Type> getTypes()
    {
        return types;
    }

    public Map<String, CompoundType> getCompoundTypes()
    {
        return subTypeLookup;
    }

    public List<String> getImports()
    {
        return imports;
    }

    public void setDependencies(Map<String, Module> deps)
    {
        this.deps = deps;
    }

/*
 * rule for whitespace:
 * a rule consumes all the trailing whitespace, but no
 * whitespace ahead.
 */
  final public List<Node> parse() throws ParseException {
    Token t, begin ;
    Node n ;
    List<Node> nodes ;
        nodes = new ArrayList<Node>();

        types = new HashMap<String, Type>();
        types.put("int", new IntegerType());
        types.put("string", new StringType());
        types.put("bool", new BooleanType());
        types.put("void", VoidType.TYPE);

        subTypeLookup = new HashMap<String, CompoundType>();

        imports = new ArrayList<String>();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(WHITESPACE);
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPORT:
      case EXPORT:
      case UNPACK:
      case TYPEDECL:
      case COMPOUNDTYPEDECL:
      case IFSTMT:
      case WHILESTMT:
      case RETURNSTMT:
      case LPAR:
      case LBRACKET:
      case TYPENAME:
      case IDENT:
      case STRING:
      case NUMBER:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      if (jj_2_1(2147483647)) {
        n = TypeDeclaration();
              nodes.add(n);
      } else if (jj_2_2(2147483647)) {
        n = CompoundTypeDeclaration();
              nodes.add(n);
      } else if (jj_2_3(2147483647)) {
        begin = jj_consume_token(IMPORT);
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case WHITESPACE:
            ;
            break;
          default:
            jj_la1[2] = jj_gen;
            break label_3;
          }
          jj_consume_token(WHITESPACE);
        }
        t = jj_consume_token(IDENT);
        jj_consume_token(STMTBREAK);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case WHITESPACE:
            ;
            break;
          default:
            jj_la1[3] = jj_gen;
            break label_4;
          }
          jj_consume_token(WHITESPACE);
        }
                n = new ImportNode(t.image);
                n.setPosition(begin.beginLine, begin.beginColumn);
                nodes.add(n);
                if (pass == Pass.FIRST) {
                    imports.add(t.image);
                } else {
                    // copy types from dependency
                    Module mod = deps.get(t.image);
                    types.putAll(mod.getTypes());
                    subTypeLookup.putAll(mod.getCompoundTypes());
                }
      } else if (jj_2_4(2147483647)) {
        begin = jj_consume_token(EXPORT);
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case WHITESPACE:
            ;
            break;
          default:
            jj_la1[4] = jj_gen;
            break label_5;
          }
          jj_consume_token(WHITESPACE);
        }
        t = jj_consume_token(IDENT);
        jj_consume_token(STMTBREAK);
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case WHITESPACE:
            ;
            break;
          default:
            jj_la1[5] = jj_gen;
            break label_6;
          }
          jj_consume_token(WHITESPACE);
        }
            n = new ExportNode(t.image);
            n.setPosition(begin.beginLine, begin.beginColumn);
            nodes.add(n);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case UNPACK:
        case IFSTMT:
        case WHILESTMT:
        case RETURNSTMT:
        case LPAR:
        case LBRACKET:
        case TYPENAME:
        case IDENT:
        case STRING:
        case NUMBER:
          n = Statement();
              nodes.add(n);
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
      {if (true) return nodes;}
    throw new Error("Missing return statement in function");
  }

  final public Type FunctionType() throws ParseException {
    Type type, type2 ;
    List<Type> params ;
      params = new ArrayList<Type>();
    jj_consume_token(LPAR);
    type = Type();
    jj_consume_token(RPAR);
    jj_consume_token(LPAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAR:
    case IDENT:
      type2 = Type();
          params.add(type2);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LISTSEP:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_7;
        }
        jj_consume_token(LISTSEP);
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case WHITESPACE:
            ;
            break;
          default:
            jj_la1[8] = jj_gen;
            break label_8;
          }
          jj_consume_token(WHITESPACE);
        }
        type2 = Type();
              params.add(type2);
      }
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    jj_consume_token(RPAR);
      type = new FunctionType(type, params);
      {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

  final public Type ObjectType() throws ParseException {
    Token t ;
    Type type, type2 ;
    Map<String, Type> params ;
      params = new LinkedHashMap<String, Type>();
    jj_consume_token(LPAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      t = jj_consume_token(IDENT);
      jj_consume_token(KEYVALUESEP);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHITESPACE:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_9;
        }
        jj_consume_token(WHITESPACE);
      }
      type2 = Type();
          params.put(t.image, type2);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LISTSEP:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_10;
        }
        jj_consume_token(LISTSEP);
        label_11:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case WHITESPACE:
            ;
            break;
          default:
            jj_la1[12] = jj_gen;
            break label_11;
          }
          jj_consume_token(WHITESPACE);
        }
        t = jj_consume_token(IDENT);
        jj_consume_token(KEYVALUESEP);
        label_12:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case WHITESPACE:
            ;
            break;
          default:
            jj_la1[13] = jj_gen;
            break label_12;
          }
          jj_consume_token(WHITESPACE);
        }
        type2 = Type();
              params.put(t.image, type2);
      }
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    jj_consume_token(RPAR);
      type = new ObjectType(params);
      {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

  final public Type Type() throws ParseException {
    Token t ;
    Type type, type2 ;
    List<Type> params ;
    if (jj_2_5(2147483647)) {
      type = FunctionType();
    } else if (jj_2_6(2147483647)) {
      type = ObjectType();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        t = jj_consume_token(IDENT);
                type = types.get(t.image);
                if (type == null && pass == Pass.SECOND) {
                    {if (true) throw new ParseException("Type " + t.image + " not found.");}
                }
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_13;
      }
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
          type = new ArrayType(type);
    }
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_14;
      }
      jj_consume_token(WHITESPACE);
    }
      {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

  final public Node TypeDeclaration() throws ParseException {
    Token t, begin ;
    Type type ;
    Node n, n2 ;
    begin = jj_consume_token(TYPEDECL);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_15;
      }
      jj_consume_token(WHITESPACE);
    }
    t = jj_consume_token(IDENT);
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_16;
      }
      jj_consume_token(WHITESPACE);
    }
    type = Type();
    jj_consume_token(STMTBREAK);
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_17;
      }
      jj_consume_token(WHITESPACE);
    }
    types.put(t.image, type);
    n = new TypeDeclNode(type, t.image);
    n.setPosition(begin.beginLine, begin.beginColumn);
    {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public Node CompoundTypeDeclaration() throws ParseException {
    String name ;
    Token t, begin ;
    Type type = null ;
    CompoundType compoundType ;
    Node n, n2 ;
    Map<String, Type> subTypes ;
    subTypes = new HashMap<String, Type>();
    begin = jj_consume_token(COMPOUNDTYPEDECL);
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_18;
      }
      jj_consume_token(WHITESPACE);
    }
    t = jj_consume_token(IDENT);
    name = t.image;
    compoundType = new CompoundType(name, subTypes);
    types.put(name, compoundType);
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_19;
      }
      jj_consume_token(WHITESPACE);
    }
    t = jj_consume_token(TYPENAME);
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_20;
      }
      jj_consume_token(WHITESPACE);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAR:
    case IDENT:
      type = Type();
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    if (type == null) {
        type = new CompoundTerminalType(t.image);
    }
    subTypes.put(t.image, type);
    subTypeLookup.put(t.image, compoundType);
    type = null;
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LISTSEP:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_21;
      }
      jj_consume_token(LISTSEP);
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHITESPACE:
          ;
          break;
        default:
          jj_la1[26] = jj_gen;
          break label_22;
        }
        jj_consume_token(WHITESPACE);
      }
      t = jj_consume_token(TYPENAME);
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHITESPACE:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_23;
        }
        jj_consume_token(WHITESPACE);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAR:
      case IDENT:
        type = Type();
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
        if (type == null) {
            type = new CompoundTerminalType(t.image);
        }
        if (subTypeLookup.containsKey(t.image)) {
            {if (true) throw new ParseException(t.image + " has already been declared.");}
        }
        subTypeLookup.put(t.image, compoundType);
        subTypes.put(t.image, type);
        type = null;
    }
    jj_consume_token(STMTBREAK);
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_24;
      }
      jj_consume_token(WHITESPACE);
    }
    n = new TypeDeclNode(compoundType, name);
    n.setPosition(begin.beginLine, begin.beginColumn);
    {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public Node Statement() throws ParseException {
    Token t, begin ;
    Node n, n2 ;
    Expression expr, expr2 ;
    Variable var ;
    Declaration d ;
    if (jj_2_7(2147483647)) {
      n = IfStatement();
    } else if (jj_2_8(2147483647)) {
      n = UnpackStatement();
    } else if (jj_2_9(2147483647)) {
      n = WhileStatement();
    } else if (jj_2_10(2147483647)) {
      t = jj_consume_token(RETURNSTMT);
      label_25:
      while (true) {
        jj_consume_token(WHITESPACE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHITESPACE:
          ;
          break;
        default:
          jj_la1[30] = jj_gen;
          break label_25;
        }
      }
      expr = Expression();
      jj_consume_token(STMTBREAK);
      label_26:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHITESPACE:
          ;
          break;
        default:
          jj_la1[31] = jj_gen;
          break label_26;
        }
        jj_consume_token(WHITESPACE);
      }
            n = new ReturnStatement(expr);
            n.setPosition(t.beginLine, t.beginColumn);
    } else if (jj_2_11(2147483647)) {
      d = Declaration();
      t = jj_consume_token(ASSIGN);
      label_27:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHITESPACE:
          ;
          break;
        default:
          jj_la1[32] = jj_gen;
          break label_27;
        }
        jj_consume_token(WHITESPACE);
      }
      expr = Expression();
            n = new AssignDeclarationNode(d, expr);
            n.setPosition(t.beginLine, t.beginColumn);
      jj_consume_token(STMTBREAK);
      label_28:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHITESPACE:
          ;
          break;
        default:
          jj_la1[33] = jj_gen;
          break label_28;
        }
        jj_consume_token(WHITESPACE);
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAR:
      case LBRACKET:
      case TYPENAME:
      case IDENT:
      case STRING:
      case NUMBER:
        n = Expression();
        jj_consume_token(STMTBREAK);
        label_29:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case WHITESPACE:
            ;
            break;
          default:
            jj_la1[34] = jj_gen;
            break label_29;
          }
          jj_consume_token(WHITESPACE);
        }
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public Node UnpackStatement() throws ParseException {
    Token t, begin ;
    Expression src ;
    String dst = null ;
    Node n ;
    String subType ;
    List<Node> stmts;
      stmts = new ArrayList<Node>();
    begin = jj_consume_token(UNPACK);
    label_30:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
        ;
        break;
      default:
        jj_la1[36] = jj_gen;
        break label_30;
      }
      jj_consume_token(WHITESPACE);
    }
    src = Expression();
    jj_consume_token(AS);
    label_31:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
        ;
        break;
      default:
        jj_la1[37] = jj_gen;
        break label_31;
      }
      jj_consume_token(WHITESPACE);
    }
    t = jj_consume_token(TYPENAME);
    label_32:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
        ;
        break;
      default:
        jj_la1[38] = jj_gen;
        break label_32;
      }
      jj_consume_token(WHITESPACE);
    }
      subType = t.image;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      t = jj_consume_token(IDENT);
      label_33:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHITESPACE:
          ;
          break;
        default:
          jj_la1[39] = jj_gen;
          break label_33;
        }
        jj_consume_token(WHITESPACE);
      }
          dst = t.image;
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
    jj_consume_token(LCLAUSE);
    label_34:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
        ;
        break;
      default:
        jj_la1[41] = jj_gen;
        break label_34;
      }
      jj_consume_token(WHITESPACE);
    }
    label_35:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNPACK:
      case IFSTMT:
      case WHILESTMT:
      case RETURNSTMT:
      case LPAR:
      case LBRACKET:
      case TYPENAME:
      case IDENT:
      case STRING:
      case NUMBER:
        ;
        break;
      default:
        jj_la1[42] = jj_gen;
        break label_35;
      }
      n = Statement();
          stmts.add(n);
    }
    jj_consume_token(RCLAUSE);
    label_36:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
        ;
        break;
      default:
        jj_la1[43] = jj_gen;
        break label_36;
      }
      jj_consume_token(WHITESPACE);
    }
         CompoundType type = subTypeLookup.get(subType);
         if (type == null && pass == Pass.SECOND) {
            {if (true) throw new ParseException(subType + " not found.");}
         }
         n = new UnpackStatement(src, dst, type, subType, stmts);
         n.setPosition(begin.beginLine, begin.beginColumn);
         {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public ElseIfStatement ElseIfStatement() throws ParseException {
    Token t, begin ;
    Node n, n2 ;
    List<Node> stmts;
      stmts = new ArrayList<Node>();
    begin = jj_consume_token(ELSEIFSTMT);
    label_37:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
        ;
        break;
      default:
        jj_la1[44] = jj_gen;
        break label_37;
      }
      jj_consume_token(WHITESPACE);
    }
    n = Expression();
    jj_consume_token(LCLAUSE);
    label_38:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
        ;
        break;
      default:
        jj_la1[45] = jj_gen;
        break label_38;
      }
      jj_consume_token(WHITESPACE);
    }
    label_39:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNPACK:
      case IFSTMT:
      case WHILESTMT:
      case RETURNSTMT:
      case LPAR:
      case LBRACKET:
      case TYPENAME:
      case IDENT:
      case STRING:
      case NUMBER:
        ;
        break;
      default:
        jj_la1[46] = jj_gen;
        break label_39;
      }
      n2 = Statement();
          stmts.add(n2);
    }
    jj_consume_token(RCLAUSE);
    label_40:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
        ;
        break;
      default:
        jj_la1[47] = jj_gen;
        break label_40;
      }
      jj_consume_token(WHITESPACE);
    }
     ElseIfStatement stmt = new ElseIfStatement(n, stmts);
     stmt.setPosition(begin.beginLine, begin.beginColumn);
     {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public ElseStatement ElseStatement() throws ParseException {
    Token t, begin ;
    Node n, n2 ;
    List<Node> stmts;
      stmts = new ArrayList<Node>();
    begin = jj_consume_token(ELSESTMT);
    label_41:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
        ;
        break;
      default:
        jj_la1[48] = jj_gen;
        break label_41;
      }
      jj_consume_token(WHITESPACE);
    }
    jj_consume_token(LCLAUSE);
    label_42:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
        ;
        break;
      default:
        jj_la1[49] = jj_gen;
        break label_42;
      }
      jj_consume_token(WHITESPACE);
    }
    label_43:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNPACK:
      case IFSTMT:
      case WHILESTMT:
      case RETURNSTMT:
      case LPAR:
      case LBRACKET:
      case TYPENAME:
      case IDENT:
      case STRING:
      case NUMBER:
        ;
        break;
      default:
        jj_la1[50] = jj_gen;
        break label_43;
      }
      n2 = Statement();
          stmts.add(n2);
    }
    jj_consume_token(RCLAUSE);
    label_44:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
        ;
        break;
      default:
        jj_la1[51] = jj_gen;
        break label_44;
      }
      jj_consume_token(WHITESPACE);
    }
     ElseStatement stmt =  new ElseStatement(stmts);
     stmt.setPosition(begin.beginLine, begin.beginColumn);
     {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public Node IfStatement() throws ParseException {
    Token t, begin ;
    Node n, n2 ;
    ElseIfStatement elseIfStmt = null ;
    List<ElseIfStatement> elseIfList ;
    ElseStatement elseStmt = null ;
    List<Node> stmts;
      stmts = new ArrayList<Node>();
      elseIfList = new ArrayList<ElseIfStatement>();
    begin = jj_consume_token(IFSTMT);
    label_45:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
        ;
        break;
      default:
        jj_la1[52] = jj_gen;
        break label_45;
      }
      jj_consume_token(WHITESPACE);
    }
    n = Expression();
    jj_consume_token(LCLAUSE);
    label_46:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
        ;
        break;
      default:
        jj_la1[53] = jj_gen;
        break label_46;
      }
      jj_consume_token(WHITESPACE);
    }
    label_47:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNPACK:
      case IFSTMT:
      case WHILESTMT:
      case RETURNSTMT:
      case LPAR:
      case LBRACKET:
      case TYPENAME:
      case IDENT:
      case STRING:
      case NUMBER:
        ;
        break;
      default:
        jj_la1[54] = jj_gen;
        break label_47;
      }
      n2 = Statement();
          stmts.add(n2);
    }
    jj_consume_token(RCLAUSE);
    label_48:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
        ;
        break;
      default:
        jj_la1[55] = jj_gen;
        break label_48;
      }
      jj_consume_token(WHITESPACE);
    }
    label_49:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSEIFSTMT:
        ;
        break;
      default:
        jj_la1[56] = jj_gen;
        break label_49;
      }
      elseIfStmt = ElseIfStatement();
          elseIfList.add(elseIfStmt);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSESTMT:
      elseStmt = ElseStatement();
      break;
    default:
      jj_la1[57] = jj_gen;
      ;
    }
     n = new IfStatement(n, stmts, elseIfList, elseStmt);
     n.setPosition(begin.beginLine, begin.beginColumn);
     {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public Node WhileStatement() throws ParseException {
    Token t, begin ;
    Node n, n2 ;
    List<Node> stmts;
      stmts = new ArrayList<Node>();
    begin = jj_consume_token(WHILESTMT);
    label_50:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
        ;
        break;
      default:
        jj_la1[58] = jj_gen;
        break label_50;
      }
      jj_consume_token(WHITESPACE);
    }
    n = Expression();
    jj_consume_token(LCLAUSE);
    label_51:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
        ;
        break;
      default:
        jj_la1[59] = jj_gen;
        break label_51;
      }
      jj_consume_token(WHITESPACE);
    }
    label_52:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNPACK:
      case IFSTMT:
      case WHILESTMT:
      case RETURNSTMT:
      case LPAR:
      case LBRACKET:
      case TYPENAME:
      case IDENT:
      case STRING:
      case NUMBER:
        ;
        break;
      default:
        jj_la1[60] = jj_gen;
        break label_52;
      }
      n2 = Statement();
          stmts.add(n2);
    }
    jj_consume_token(RCLAUSE);
    label_53:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
        ;
        break;
      default:
        jj_la1[61] = jj_gen;
        break label_53;
      }
      jj_consume_token(WHITESPACE);
    }
    n = new WhileStatement(n, stmts);
    n.setPosition(begin.beginLine, begin.beginColumn);
    {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public Declaration Declaration() throws ParseException {
    Token t ;
    Type type ;
    String name ;
    Node value ;
    Declaration d ;
    type = Type();
    t = jj_consume_token(IDENT);
      name = t.image;
      d = new Declaration(type, name);
    label_54:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
        ;
        break;
      default:
        jj_la1[62] = jj_gen;
        break label_54;
      }
      jj_consume_token(WHITESPACE);
    }
    d.setPosition(t.beginLine, t.beginColumn);
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public ObjectNode Object() throws ParseException {
    Map<String, Expression> nodes ;
    Token t, begin ;
    Expression n ;
      nodes = new LinkedHashMap<String, Expression>();
    begin = jj_consume_token(LPAR);
    label_55:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
        ;
        break;
      default:
        jj_la1[63] = jj_gen;
        break label_55;
      }
      jj_consume_token(WHITESPACE);
    }
    t = jj_consume_token(IDENT);
    jj_consume_token(KEYVALUESEP);
    label_56:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
        ;
        break;
      default:
        jj_la1[64] = jj_gen;
        break label_56;
      }
      jj_consume_token(WHITESPACE);
    }
    n = Expression();
      nodes.put(t.image, n);
    label_57:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LISTSEP:
        ;
        break;
      default:
        jj_la1[65] = jj_gen;
        break label_57;
      }
      jj_consume_token(LISTSEP);
      label_58:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHITESPACE:
          ;
          break;
        default:
          jj_la1[66] = jj_gen;
          break label_58;
        }
        jj_consume_token(WHITESPACE);
      }
      t = jj_consume_token(IDENT);
      jj_consume_token(KEYVALUESEP);
      label_59:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHITESPACE:
          ;
          break;
        default:
          jj_la1[67] = jj_gen;
          break label_59;
        }
        jj_consume_token(WHITESPACE);
      }
      n = Expression();
          nodes.put(t.image, n);
    }
    jj_consume_token(RPAR);
    label_60:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
        ;
        break;
      default:
        jj_la1[68] = jj_gen;
        break label_60;
      }
      jj_consume_token(WHITESPACE);
    }
    ObjectNode obj = new ObjectNode(nodes);
    obj.setPosition(begin.beginLine, begin.beginColumn);
    {if (true) return obj;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayNode Array() throws ParseException {
    Token begin ;
    List<Expression> nodes ;
    Expression n ;
      nodes = new ArrayList<Expression>();
    begin = jj_consume_token(LBRACKET);
    label_61:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
        ;
        break;
      default:
        jj_la1[69] = jj_gen;
        break label_61;
      }
      jj_consume_token(WHITESPACE);
    }
    n = Expression();
      nodes.add(n);
    label_62:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LISTSEP:
        ;
        break;
      default:
        jj_la1[70] = jj_gen;
        break label_62;
      }
      jj_consume_token(LISTSEP);
      label_63:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHITESPACE:
          ;
          break;
        default:
          jj_la1[71] = jj_gen;
          break label_63;
        }
        jj_consume_token(WHITESPACE);
      }
      n = Expression();
          nodes.add(n);
    }
    jj_consume_token(RBRACKET);
    label_64:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
        ;
        break;
      default:
        jj_la1[72] = jj_gen;
        break label_64;
      }
      jj_consume_token(WHITESPACE);
    }
    ArrayNode stmt = new ArrayNode(nodes);
    stmt.setPosition(begin.beginLine, begin.beginColumn);
    {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public FunctionDecl Function() throws ParseException {
    Token t, begin ;
    Type type ;
    Node n ;
    Declaration d ;
    FunctionDecl f ;
    List<Declaration> params ;
    List<Node> statements ;
      params = new ArrayList<Declaration>();
      statements = new ArrayList<Node>();
    begin = jj_consume_token(LPAR);
    type = Type();
    jj_consume_token(RPAR);
    jj_consume_token(LPAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAR:
    case IDENT:
      d = Declaration();
          params.add(d);
      label_65:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LISTSEP:
          ;
          break;
        default:
          jj_la1[73] = jj_gen;
          break label_65;
        }
        jj_consume_token(LISTSEP);
        label_66:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case WHITESPACE:
            ;
            break;
          default:
            jj_la1[74] = jj_gen;
            break label_66;
          }
          jj_consume_token(WHITESPACE);
        }
        d = Declaration();
              params.add(d);
      }
      break;
    default:
      jj_la1[75] = jj_gen;
      ;
    }
    jj_consume_token(RPAR);
    label_67:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
        ;
        break;
      default:
        jj_la1[76] = jj_gen;
        break label_67;
      }
      jj_consume_token(WHITESPACE);
    }
    jj_consume_token(LCLAUSE);
    label_68:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
        ;
        break;
      default:
        jj_la1[77] = jj_gen;
        break label_68;
      }
      jj_consume_token(WHITESPACE);
    }
    label_69:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNPACK:
      case IFSTMT:
      case WHILESTMT:
      case RETURNSTMT:
      case LPAR:
      case LBRACKET:
      case TYPENAME:
      case IDENT:
      case STRING:
      case NUMBER:
        ;
        break;
      default:
        jj_la1[78] = jj_gen;
        break label_69;
      }
      n = Statement();
              statements.add(n);
    }
    jj_consume_token(RCLAUSE);
    label_70:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
        ;
        break;
      default:
        jj_la1[79] = jj_gen;
        break label_70;
      }
      jj_consume_token(WHITESPACE);
    }
    f = new FunctionDecl(type, params, statements);
    f.setPosition(begin.beginLine, begin.beginColumn);
    {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

  final public Expression Expression() throws ParseException {
    Token t ;
    Expression n, n2 ;
    n = ExpressionLogic();
    label_71:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        ;
        break;
      default:
        jj_la1[80] = jj_gen;
        break label_71;
      }
      t = jj_consume_token(ASSIGN);
      label_72:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHITESPACE:
          ;
          break;
        default:
          jj_la1[81] = jj_gen;
          break label_72;
        }
        jj_consume_token(WHITESPACE);
      }
      n2 = ExpressionLogic();
            n = new AssignNode(n, n2);
            n.setPosition(t.beginLine, t.beginColumn);
    }
      {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ExpressionLogic() throws ParseException {
    Token t ;
    Expression n, n2 ;
    n = ExpressionCmp();
    label_73:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case OR:
      case XOR:
        ;
        break;
      default:
        jj_la1[82] = jj_gen;
        break label_73;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        t = jj_consume_token(AND);
        label_74:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case WHITESPACE:
            ;
            break;
          default:
            jj_la1[83] = jj_gen;
            break label_74;
          }
          jj_consume_token(WHITESPACE);
        }
        n2 = ExpressionCmp();
            n = new AndNode(n, n2);
            n.setPosition(t.beginLine, t.beginColumn);
        break;
      case OR:
        t = jj_consume_token(OR);
        label_75:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case WHITESPACE:
            ;
            break;
          default:
            jj_la1[84] = jj_gen;
            break label_75;
          }
          jj_consume_token(WHITESPACE);
        }
        n2 = ExpressionCmp();
            n = new OrNode(n, n2);
            n.setPosition(t.beginLine, t.beginColumn);
        break;
      case XOR:
        t = jj_consume_token(XOR);
        label_76:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case WHITESPACE:
            ;
            break;
          default:
            jj_la1[85] = jj_gen;
            break label_76;
          }
          jj_consume_token(WHITESPACE);
        }
        n2 = ExpressionCmp();
            n = new XorNode(n, n2);
            n.setPosition(t.beginLine, t.beginColumn);
        break;
      default:
        jj_la1[86] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ExpressionCmp() throws ParseException {
    Token t ;
    Expression n, n2 ;
    n = ExpressionArithmetic();
    label_77:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NOTEQ:
      case GT:
      case GTEQ:
      case LT:
      case LTEQ:
        ;
        break;
      default:
        jj_la1[87] = jj_gen;
        break label_77;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        t = jj_consume_token(EQ);
        label_78:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case WHITESPACE:
            ;
            break;
          default:
            jj_la1[88] = jj_gen;
            break label_78;
          }
          jj_consume_token(WHITESPACE);
        }
        n2 = ExpressionArithmetic();
            n = new EqualNode(n, n2);
            n.setPosition(t.beginLine, t.beginColumn);
        break;
      case NOTEQ:
        t = jj_consume_token(NOTEQ);
        label_79:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case WHITESPACE:
            ;
            break;
          default:
            jj_la1[89] = jj_gen;
            break label_79;
          }
          jj_consume_token(WHITESPACE);
        }
        n2 = ExpressionArithmetic();
            n = new NotEqualNode(n, n2);
            n.setPosition(t.beginLine, t.beginColumn);
        break;
      case LT:
        t = jj_consume_token(LT);
        label_80:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case WHITESPACE:
            ;
            break;
          default:
            jj_la1[90] = jj_gen;
            break label_80;
          }
          jj_consume_token(WHITESPACE);
        }
        n2 = ExpressionArithmetic();
            n = new LtNode(n, n2);
            n.setPosition(t.beginLine, t.beginColumn);
        break;
      case GT:
        t = jj_consume_token(GT);
        label_81:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case WHITESPACE:
            ;
            break;
          default:
            jj_la1[91] = jj_gen;
            break label_81;
          }
          jj_consume_token(WHITESPACE);
        }
        n2 = ExpressionArithmetic();
            n = new GtNode(n, n2);
            n.setPosition(t.beginLine, t.beginColumn);
        break;
      case LTEQ:
        t = jj_consume_token(LTEQ);
        label_82:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case WHITESPACE:
            ;
            break;
          default:
            jj_la1[92] = jj_gen;
            break label_82;
          }
          jj_consume_token(WHITESPACE);
        }
        n2 = ExpressionArithmetic();
            n = new LtEqNode(n, n2);
            n.setPosition(t.beginLine, t.beginColumn);
        break;
      case GTEQ:
        t = jj_consume_token(GTEQ);
        label_83:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case WHITESPACE:
            ;
            break;
          default:
            jj_la1[93] = jj_gen;
            break label_83;
          }
          jj_consume_token(WHITESPACE);
        }
        n2 = ExpressionArithmetic();
            n = new GtEqNode(n, n2);
            n.setPosition(t.beginLine, t.beginColumn);
        break;
      default:
        jj_la1[94] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ExpressionArithmetic() throws ParseException {
    Token t ;
    Expression n, n2 ;
    n = ExpressionArithmetic2();
    label_84:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
      case SUB:
        ;
        break;
      default:
        jj_la1[95] = jj_gen;
        break label_84;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
        t = jj_consume_token(ADD);
        label_85:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case WHITESPACE:
            ;
            break;
          default:
            jj_la1[96] = jj_gen;
            break label_85;
          }
          jj_consume_token(WHITESPACE);
        }
        n2 = ExpressionArithmetic2();
                n = new AddNode(n, n2);
                n.setPosition(t.beginLine, t.beginColumn);
        break;
      case SUB:
        t = jj_consume_token(SUB);
        label_86:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case WHITESPACE:
            ;
            break;
          default:
            jj_la1[97] = jj_gen;
            break label_86;
          }
          jj_consume_token(WHITESPACE);
        }
        n2 = ExpressionArithmetic2();
                n = new SubNode(n, n2);
                n.setPosition(t.beginLine, t.beginColumn);
        break;
      default:
        jj_la1[98] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ExpressionArithmetic2() throws ParseException {
    Token t ;
    Expression n, n2 ;
    n = ExpressionOperands();
    label_87:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MUL:
      case DIV:
      case MOD:
        ;
        break;
      default:
        jj_la1[99] = jj_gen;
        break label_87;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MUL:
        t = jj_consume_token(MUL);
        label_88:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case WHITESPACE:
            ;
            break;
          default:
            jj_la1[100] = jj_gen;
            break label_88;
          }
          jj_consume_token(WHITESPACE);
        }
        n2 = ExpressionOperands();
                n = new MulNode(n, n2);
                n.setPosition(t.beginLine, t.beginColumn);
        break;
      case DIV:
        t = jj_consume_token(DIV);
        label_89:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case WHITESPACE:
            ;
            break;
          default:
            jj_la1[101] = jj_gen;
            break label_89;
          }
          jj_consume_token(WHITESPACE);
        }
        n2 = ExpressionOperands();
                n = new DivNode(n, n2);
                n.setPosition(t.beginLine, t.beginColumn);
        break;
      case MOD:
        t = jj_consume_token(MOD);
        label_90:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case WHITESPACE:
            ;
            break;
          default:
            jj_la1[102] = jj_gen;
            break label_90;
          }
          jj_consume_token(WHITESPACE);
        }
        n2 = ExpressionOperands();
                n = new ModNode(n, n2);
                n.setPosition(t.beginLine, t.beginColumn);
        break;
      default:
        jj_la1[103] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ExpressionOperands() throws ParseException {
    Token t, t2 ;
    Expression n, n2 ;
    List<Expression> params ;
    int seq = 0 ;
    if (jj_2_12(2147483647)) {
      n = Function();
    } else if (jj_2_13(2147483647)) {
      n = Object();
    } else if (jj_2_14(2147483647)) {
      n = Array();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAR:
        jj_consume_token(LPAR);
        label_91:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case WHITESPACE:
            ;
            break;
          default:
            jj_la1[104] = jj_gen;
            break label_91;
          }
          jj_consume_token(WHITESPACE);
        }
        n = Expression();
        jj_consume_token(RPAR);
        label_92:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case WHITESPACE:
            ;
            break;
          default:
            jj_la1[105] = jj_gen;
            break label_92;
          }
          jj_consume_token(WHITESPACE);
        }
        break;
      case IDENT:
        t = jj_consume_token(IDENT);
        label_93:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case WHITESPACE:
            ;
            break;
          default:
            jj_la1[106] = jj_gen;
            break label_93;
          }
          jj_consume_token(WHITESPACE);
        }
            n = new Variable(t.image, seq++);
            n.setPosition(t.beginLine, t.beginColumn);
        break;
      case NUMBER:
        t = jj_consume_token(NUMBER);
        label_94:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case WHITESPACE:
            ;
            break;
          default:
            jj_la1[107] = jj_gen;
            break label_94;
          }
          jj_consume_token(WHITESPACE);
        }
            n = new IntegerConstant(t.image);
            n.setPosition(t.beginLine, t.beginColumn);
        break;
      case TYPENAME:
        t = jj_consume_token(TYPENAME);
        label_95:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case WHITESPACE:
            ;
            break;
          default:
            jj_la1[108] = jj_gen;
            break label_95;
          }
          jj_consume_token(WHITESPACE);
        }
            CompoundType type = subTypeLookup.get(t.image);
            if (type == null && pass == Pass.SECOND) {
                {if (true) throw new ParseException(t.image + " not found.");}
            }
            n = new TypeValue(type, t.image);
            n.setPosition(t.beginLine, t.beginColumn);
        break;
      case STRING:
        t = jj_consume_token(STRING);
        label_96:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case WHITESPACE:
            ;
            break;
          default:
            jj_la1[109] = jj_gen;
            break label_96;
          }
          jj_consume_token(WHITESPACE);
        }
            n = new StringConstant(t.image.substring(1, t.image.length()-1));
            n.setPosition(t.beginLine, t.beginColumn);
        break;
      default:
        jj_la1[110] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    label_97:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUBSCRIPT:
      case LPAR:
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[111] = jj_gen;
        break label_97;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUBSCRIPT:
        jj_consume_token(SUBSCRIPT);
        t = jj_consume_token(IDENT);
        label_98:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case WHITESPACE:
            ;
            break;
          default:
            jj_la1[112] = jj_gen;
            break label_98;
          }
          jj_consume_token(WHITESPACE);
        }
            n = new SubscriptNode(n, t.image, seq++);
            n.setPosition(t.beginLine, t.beginColumn);
        break;
      case LBRACKET:
        t = jj_consume_token(LBRACKET);
        n2 = Expression();
        jj_consume_token(RBRACKET);
        label_99:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case WHITESPACE:
            ;
            break;
          default:
            jj_la1[113] = jj_gen;
            break label_99;
          }
          jj_consume_token(WHITESPACE);
        }
            n = new IndexNode(n, n2, seq++);
            n.setPosition(t.beginLine, t.beginColumn);
        break;
      case LPAR:
        t = jj_consume_token(LPAR);
        label_100:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case WHITESPACE:
            ;
            break;
          default:
            jj_la1[114] = jj_gen;
            break label_100;
          }
          jj_consume_token(WHITESPACE);
        }
              params = new ArrayList<Expression>();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAR:
        case LBRACKET:
        case TYPENAME:
        case IDENT:
        case STRING:
        case NUMBER:
          n2 = Expression();
                  params.add(n2);
          label_101:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LISTSEP:
              ;
              break;
            default:
              jj_la1[115] = jj_gen;
              break label_101;
            }
            jj_consume_token(LISTSEP);
            label_102:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case WHITESPACE:
                ;
                break;
              default:
                jj_la1[116] = jj_gen;
                break label_102;
              }
              jj_consume_token(WHITESPACE);
            }
            n2 = Expression();
                      params.add(n2);
          }
          break;
        default:
          jj_la1[117] = jj_gen;
          ;
        }
        jj_consume_token(RPAR);
        label_103:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case WHITESPACE:
            ;
            break;
          default:
            jj_la1[118] = jj_gen;
            break label_103;
          }
          jj_consume_token(WHITESPACE);
        }
            n = new FunctionCall(n, params);
            n.setPosition(t.beginLine, t.beginColumn);
        break;
      default:
        jj_la1[119] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_3R_112() {
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(LPAR)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(64)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(IDENT)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(64)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(KEYVALUESEP)) return true;
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_3R_107()) return true;
    if (jj_scan_token(IDENT)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(64)) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(RETURNSTMT)) return true;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_scan_token(LISTSEP)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(64)) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_107()) return true;
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(IMPORT)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(WHILESTMT)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(COMPOUNDTYPEDECL)) return true;
    return false;
  }

  private boolean jj_3R_107() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) return true;
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_113()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(64)) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(LPAR)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(64)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(IDENT)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(64)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAR)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(64)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LPAR)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(UNPACK)) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_3R_107()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_114()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(TYPEDECL)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(IFSTMT)) return true;
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_107()) return true;
    if (jj_scan_token(RPAR)) return true;
    if (jj_scan_token(LPAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_108()) jj_scanpos = xsp;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_scan_token(LISTSEP)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(64)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(KEYVALUESEP)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(64)) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_107()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(EXPORT)) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(KEYVALUESEP)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(64)) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_107()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_115()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_106()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_scan_token(LPAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_109()) jj_scanpos = xsp;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[120];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0xdc00000,0x0,0x0,0x0,0x0,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x0,0x0,0x1000000,0x0,0x0,0x0,0x1000000,0x0,0x0,0x0,0x1000000,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x0,0x0,0x60000000,0x0,0x0,0x0,0x60000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0xf0880032,0x0,0x0,0x0,0x0,0xf0880032,0x4000000,0x0,0x20080000,0x0,0x4000000,0x0,0x0,0x20000000,0x20000000,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20080000,0x4000000,0x0,0x0,0x20080000,0x0,0x0,0x0,0x0,0x0,0x0,0xf0880000,0x0,0x0,0x0,0x0,0x20000000,0x0,0xf0880032,0x0,0x0,0x0,0xf0880032,0x0,0x0,0x0,0xf0880032,0x0,0x0,0x0,0xf0880032,0x0,0x4,0x8,0x0,0x0,0xf0880032,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x4000000,0x0,0x20080000,0x0,0x0,0xf0880032,0x0,0x1000,0x0,0x1,0x0,0x0,0x0,0x1,0xfc0,0x0,0x0,0x0,0x0,0x0,0x0,0xfc0,0x6000,0x0,0x0,0x6000,0x38000,0x0,0x0,0x0,0x38000,0x0,0x0,0x0,0x0,0x0,0x0,0xf0080000,0x880000,0x0,0x0,0x0,0x4000000,0x0,0xf0880000,0x0,0x880000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x1,0x0,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x1,0x1,0x0,0x1,0x0,0x1,0x1,0x1,0x0,0x1,0x1,0x1,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x1,0x1,0x0,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x0,0x1,0x0,0x1,0x1,0x0,0x1,0x0,0x1,0x0,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x1,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[14];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 120; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 120; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 120; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 120; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 120; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 120; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[65];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 120; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 65; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 14; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
