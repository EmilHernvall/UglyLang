type TreeKey string;
type TreeValue string;

compound_type TreeNode #Node (key:TreeKey,
                              value:TreeValue,
                              left:TreeNode,
                              right:TreeNode),
                       #Terminator;

type Tree (root: TreeNode,
           add: (void)(TreeKey, TreeValue),
           get: (string)(TreeKey),
           size: (int)());
type TreeConstructor (Tree)();

TreeConstructor createTree =
(Tree)() {
    return (
        root: #Terminator,

        add: (void)(TreeKey key, TreeValue value) {

            (TreeNode)(TreeNode,string,string) hiddenAdd =
                (TreeNode)(TreeNode node, TreeKey key, TreeValue value) {
                    unpack node as #Terminator {
                        return (
                                key: key,
                                value: value,
                                left: #Terminator,
                                right: #Terminator
                            );
                    }

                    unpack node as #Node n {
                        if (key >= n.key) {
                            n.right = hiddenAdd(n.right, key, value);
                        }
                        if (key < n.key) {
                            n.left = hiddenAdd(n.left, key, value);
                        }
                    }
                };

            root = hiddenAdd(root, key, value);
        },

        get: (TreeValue)(TreeKey key) {

            (string)(TreeNode,string) hiddenGet =
                (string)(TreeNode node, TreeKey key) {
                    unpack node as #Node n {
                        if (key == n.key) {
                            return n.value;
                        }
                        if (key < n.key) {
                            return hiddenGet(n.right, key);
                        }
                        if (key > n.key) {
                            return hiddenGet(n.left, key);
                        }
                    }
                };

            return hiddenGet(root, key);
        },

        size: (int)() {

            (int)(TreeNode) hiddenSize =
                (int)(TreeNode node) {
                    unpack node as #Terminator {
                        return 0;
                    }

                    unpack node as #Node n {
                        return 1 + hiddenSize(n.right) + hiddenSize(n.left);
                    }
                };

            return hiddenSize(root);
        }
    );
};

Tree testTree = createTree();
testTree.add("emil", "hernvall");
testTree.add("daniel", "andersson");
testTree.add("miki", "momen");

print("size: " + intToStr(testTree.size()));
print(testTree.get("emil"));
