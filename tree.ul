type TreeKey comparable;
type TreeValue comparable;

type TreeNode (key:TreeKey,
               value:TreeValue,
               left:self,
               right:self);

type Tree (new: (self)(),
           add: (void)(TreeKey, TreeValue),
           get: (TreeValue)(TreeKey),
           size: (int)());

TreeNode BSTTreeNode =
    (
        key: "",
        value: "",
        left: BSTTreeNode,
        right: BSTTreeNode
    );

Tree UnbalancedBST =
    (
        /* TODO: copy */
        root: copy BSTTreeNode,

        new: (Tree)() {
            return copy UnbalancedBST;
        },

        add: (void)(TreeKey key, TreeValue value) {

            (void)(TreeNode,TreeKey,TreeValue) hiddenAdd =
                (void)(TreeNode node, TreeKey key, TreeValue value) {
                    /* TODO: Named tuple comparisons */
                    if (node == BSTTreeNode) {
                        node.key = key;
                        node.value = value;

                        /* TODO: returning void not implemented */
                        /*return;*/
                    }

                    if (key >= node.key) {
                        hiddenAdd(node.right, key, value);
                    }
                    /* TODO: else not implemented */
                    /*else {
                        hiddenAdd(node.left, key, value);
                    }*/
                };

            hiddenAdd(root, key, value);
        },

        get: (TreeValue)(TreeKey key) {

            (TreeValue)(TreeNode,TreeKey) hiddenGet =
                (TreeValue)(TreeNode node, TreeKey key) {
                    if (node == BSTTreeNode) {
                        return node;
                    }

                    if (key < node.key) {
                        return hiddenGet(node.right, key, value);
                    }
                    /* TODO: else if not implemented */
                    /*else if (key > node.key) {
                        return hiddenGet(node.left, key, value);
                    } else {
                        return node;
                    }*/
                };

            return hiddenGet(root, key);
        },

        size: (int)() {

            (int)(TreeNode) hiddenSize =
                (int)(TreeNode node) {
                    if (node == BSTTreeNode) {
                        return 1;
                    }

                    return 1 + hiddenSize(node.right) + hiddenSize(node.left);
                };

            return hiddenSize(root);
        }
    );

/* TODO: derive_type not implemented */
derive_type StringTree Tree with (TreeKey:string, TreeValue:string);
StringTree testTree = copy UnbalancedBST;
testTree.add("emil", "hernvall");
testTree.add("daniel", "andersson");
testTree.add("miki", "momen");

print("size: " + intToStr(testTree.size()));
print(testTree.get("emil"));
